"""init

Revision ID: ad70f4ec900f
Revises: 
Create Date: 2025-06-11 23:25:51.277591-05:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ad70f4ec900f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS agg_ai")
    op.create_table('ai_providers',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_ai_providers_id'), 'ai_providers', ['id'], unique=False, schema='agg_ai')
    op.create_table('budget',
    sa.Column('budget', sa.Float(), nullable=False),
    sa.Column('usage', sa.Float(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_budget_id'), 'budget', ['id'], unique=False, schema='agg_ai')
    op.create_table('model_hosts',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_model_hosts_id'), 'model_hosts', ['id'], unique=False, schema='agg_ai')
    op.create_table('user_group',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('name', name='uq_user_group_name'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_user_group_id'), 'user_group', ['id'], unique=False, schema='agg_ai')
    op.create_table('white_list',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_white_list_id'), 'white_list', ['id'], unique=False, schema='agg_ai')
    op.create_table('ai_provider_models',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('provider_id', sa.UUID(), nullable=True),
    sa.Column('prompt_path', sa.String(), nullable=False),
    sa.Column('price_input_token', sa.Float(), nullable=False),
    sa.Column('price_output_token', sa.Float(), nullable=False),
    sa.Column('context_length', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['agg_ai.ai_providers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_ai_provider_models_id'), 'ai_provider_models', ['id'], unique=False, schema='agg_ai')
    op.create_table('users',
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('profile_image_url', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['agg_ai.user_group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_users_id'), 'users', ['id'], unique=False, schema='agg_ai')
    op.create_table('chats',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('pinned', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['agg_ai.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_chats_id'), 'chats', ['id'], unique=False, schema='agg_ai')
    op.create_table('host_api_keys',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('host_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('encrypted_key', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['agg_ai.model_hosts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['agg_ai.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'host_id', name='uq_user_host_api_key'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_host_api_keys_id'), 'host_api_keys', ['id'], unique=False, schema='agg_ai')
    op.create_table('limits',
    sa.Column('model_id', sa.UUID(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['agg_ai.ai_provider_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_limits_id'), 'limits', ['id'], unique=False, schema='agg_ai')
    op.create_table('model_host_associations',
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('host_id', sa.UUID(), nullable=False),
    sa.Column('model_slug', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['agg_ai.model_hosts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['model_id'], ['agg_ai.ai_provider_models.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_model_host_associations_id'), 'model_host_associations', ['id'], unique=False, schema='agg_ai')
    op.create_table('resources',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('content_type', sa.String(), nullable=False),
    sa.Column('storage_path', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['agg_ai.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('storage_path'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_resources_id'), 'resources', ['id'], unique=False, schema='agg_ai')
    op.create_table('usage',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('model_id', sa.UUID(), nullable=True),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('completion_tokens', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['agg_ai.ai_provider_models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['agg_ai.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_table('chat_messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chat_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.UUID(), nullable=True),
    sa.Column('previous_message_id', sa.UUID(), nullable=True),
    sa.Column('seq_num', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('selected', sa.Boolean(), nullable=True),
    sa.Column('attachments', sa.ARRAY(sa.UUID()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['agg_ai.chats.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['model_id'], ['agg_ai.ai_provider_models.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['previous_message_id'], ['agg_ai.chat_messages.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_table('shared_conversations',
    sa.Column('chat_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['agg_ai.chats.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_shared_conversations_id'), 'shared_conversations', ['id'], unique=False, schema='agg_ai')
    op.create_table('user_group_limits',
    sa.Column('user_group_id', sa.UUID(), nullable=True),
    sa.Column('limits_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['limits_id'], ['agg_ai.limits.id'], ),
    sa.ForeignKeyConstraint(['user_group_id'], ['agg_ai.user_group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_group_id', 'limits_id', name='uq_user_group_limits'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_user_group_limits_id'), 'user_group_limits', ['id'], unique=False, schema='agg_ai')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_agg_ai_user_group_limits_id'), table_name='user_group_limits', schema='agg_ai')
    op.drop_table('user_group_limits', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_shared_conversations_id'), table_name='shared_conversations', schema='agg_ai')
    op.drop_table('shared_conversations', schema='agg_ai')
    op.drop_table('chat_messages', schema='agg_ai')
    op.drop_table('usage', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_resources_id'), table_name='resources', schema='agg_ai')
    op.drop_table('resources', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_model_host_associations_id'), table_name='model_host_associations', schema='agg_ai')
    op.drop_table('model_host_associations', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_limits_id'), table_name='limits', schema='agg_ai')
    op.drop_table('limits', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_host_api_keys_id'), table_name='host_api_keys', schema='agg_ai')
    op.drop_table('host_api_keys', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_chats_id'), table_name='chats', schema='agg_ai')
    op.drop_table('chats', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_users_id'), table_name='users', schema='agg_ai')
    op.drop_table('users', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_ai_provider_models_id'), table_name='ai_provider_models', schema='agg_ai')
    op.drop_table('ai_provider_models', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_white_list_id'), table_name='white_list', schema='agg_ai')
    op.drop_table('white_list', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_user_group_id'), table_name='user_group', schema='agg_ai')
    op.drop_table('user_group', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_model_hosts_id'), table_name='model_hosts', schema='agg_ai')
    op.drop_table('model_hosts', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_budget_id'), table_name='budget', schema='agg_ai')
    op.drop_table('budget', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_ai_providers_id'), table_name='ai_providers', schema='agg_ai')
    op.drop_table('ai_providers', schema='agg_ai')
    op.execute("DROP SCHEMA IF EXISTS agg_ai")
    # ### end Alembic commands ###
