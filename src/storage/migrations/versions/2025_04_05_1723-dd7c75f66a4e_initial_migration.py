"""initial_migration

Revision ID: dd7c75f66a4e
Revises: 
Create Date: 2025-04-05 17:23:11.488072-05:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'dd7c75f66a4e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS agg_ai;")
    op.create_table('ai_providers',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_ai_providers_id'), 'ai_providers', ['id'], unique=False, schema='agg_ai')
    op.create_table('prompts',
    sa.Column('prompt', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_prompts_id'), 'prompts', ['id'], unique=False, schema='agg_ai')
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('profile_image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='agg_ai'
    )
    op.create_table('ai_provider_models',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=True),
    sa.Column('prompt_id', sa.Integer(), nullable=True),
    sa.Column('price_input_token', sa.Float(), nullable=False),
    sa.Column('price_output_token', sa.Float(), nullable=False),
    sa.Column('context_length', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['agg_ai.prompts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['provider_id'], ['agg_ai.ai_providers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_index(op.f('ix_agg_ai_ai_provider_models_id'), 'ai_provider_models', ['id'], unique=False, schema='agg_ai')
    op.create_table('chats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('pinned', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['agg_ai.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    op.create_table('chat_messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chat_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['agg_ai.chats.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['model_id'], ['agg_ai.ai_provider_models.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='agg_ai'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('chat_messages', schema='agg_ai')
    op.drop_table('chats', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_ai_provider_models_id'), table_name='ai_provider_models', schema='agg_ai')
    op.drop_table('ai_provider_models', schema='agg_ai')
    op.drop_table('users', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_prompts_id'), table_name='prompts', schema='agg_ai')
    op.drop_table('prompts', schema='agg_ai')
    op.drop_index(op.f('ix_agg_ai_ai_providers_id'), table_name='ai_providers', schema='agg_ai')
    op.drop_table('ai_providers', schema='agg_ai')
    op.execute("DROP SCHEMA IF EXISTS agg_ai;")
    # ### end Alembic commands ###
