name: Build and Push to Artifact Registry

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push to Artifact Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "env=prd" >> $GITHUB_ENV
            echo "ENV_UPPERCASE=PRD" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "env=stg" >> $GITHUB_ENV
            echo "ENV_UPPERCASE=STG" >> $GITHUB_ENV
          else
            echo "env=dev" >> $GITHUB_ENV
            echo "ENV_UPPERCASE=DEV" >> $GITHUB_ENV
          fi
          
          # Set GCP variables based on environment
          echo "GAR_LOCATION=${{ secrets[format('{0}_GAR_LOCATION', env.ENV_UPPERCASE)] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[format('{0}_GCP_PROJECT_ID', env.ENV_UPPERCASE)] }}" >> $GITHUB_ENV
          echo "REPOSITORY=${{ secrets[format('{0}_GAR_REPOSITORY', env.ENV_UPPERCASE)] }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "WORKLOAD_IDENTITY_PROVIDER=${{ secrets[format('{0}_GCP_WORKLOAD_IDENTITY_PROVIDER', env.ENV_UPPERCASE)] }}" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=${{ secrets[format('{0}_GCP_SERVICE_ACCOUNT', env.ENV_UPPERCASE)] }}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show Environment Info
        run: |
          echo "Using environment: ${{ env.env }}"

      # Setup Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate to Google Cloud
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      # Install and configure gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Configure Docker to use gcloud as a credential helper for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Generate Docker metadata (tags, labels)
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ env.env }},enable=true
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=pr

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Show the image URL
      - name: Show image URL
        run: |
          echo "Image pushed to ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}"
          echo "Environment: ${{ env.env }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
      
      # Update Cloud Run service with new image (only if not a PR)
      - name: Update Cloud Run service with new image
        if: ${{ github.event_name != 'pull_request' }}
        id: update
        run: |
          # Only update the image of the existing Cloud Run service created by Terraform
          gcloud run services update ${{ env.env }}-${{ github.event.repository.name }} \
            --region=${{ env.GAR_LOCATION }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.env }} \
            --project=${{ env.PROJECT_ID }}
          
          # Get the URL of the service
          CLOUD_RUN_URL=$(gcloud run services describe ${{ env.env }}-${{ github.event.repository.name }} --region=${{ env.GAR_LOCATION }} --project=${{ env.PROJECT_ID }} --format="value(status.url)")
          echo "url=$CLOUD_RUN_URL" >> $GITHUB_OUTPUT
      
      # Output the Cloud Run URL
      - name: Show Cloud Run URL
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "Updated Cloud Run service at: ${{ steps.update.outputs.url }}"
          echo "Note: This service requires authentication to access (not publicly accessible)"